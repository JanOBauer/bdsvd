order[order %in% c(hcsvd.ht$cluster1, hcsvd.ht$cluster2)] <- c(order[order %in% hcsvd.ht$cluster1],
order[order %in% hcsvd.ht$cluster2])
cat("\rSplit", iter, "from", p - 1, "(", round(iter / (p - 1) * 100, 2), "%)                    ")
k.p <- c(k.p, hcsvd.ht$k.p)
}
u.cor <- 1 - dist.matrix
dist.matrix <- stats::as.dist(dist.matrix)
attr(dist.matrix, "Size") <- p
cat("\r======== FINISHED ========                    ")
cat("\n")
return(list(dist.matrix = dist.matrix, u.cor = u.cor, k.p = k.p,
merge = merge, order = order, height = height, labels = labels))
}
hcsvd2.ht <- function(R,
k,
linkage,
reliability,
labels,
max.iter,
trace = TRUE
) {
p <- ncol(R)
if (p == 2) {
cluster1 <- colnames(R)[1]
cluster2 <- colnames(R)[2]
if (reliability == "linkage") {
idx.cluster <- list(labels[1], labels[2])
cluster.reliability <- calc.distance(R, idx.cluster, labels, p, linkage)
} else {
R12 <- R[1,2]
cluster.reliability <- calc.reliability(R, R12, p, reliability)
}
return(list(cluster1 = cluster1, cluster2 = cluster2, cluster.reliability = cluster.reliability, k.p = NA))
}
lambda <- eigen(R)$values
if (is.numeric(k)) {
if (k == 1){
k <- p - 1
} else {
k <- min(round(k * p), p - 1)
}
}
if (k == "Kaiser") {
k <- min(sum(lambda >= 1) + 2, p - 1)
}
dof.grid <- 1 : (p - 1)
distance <- -Inf
i <- 1
for (dof in dof.grid) {
V <- tryCatch(suppressWarnings(calc.sparse.loadings(X = R, SVD = irlba::irlba(R, k), k = k, n = p - dof, maxit = max.iter)$v), error = function(e) e)
if (inherits(V, "error")) next
for (i in 1:k) {
v <- V[, i]
idx.cluster <- list(labels[v != 0], labels[v == 0])
distance.ht <- calc.distance(R, idx.cluster, labels, p, linkage)
if (distance.ht > distance) {
distance <- distance.ht
cluster1 <- idx.cluster[[1]]
cluster2 <- idx.cluster[[2]]
}
}
}
if (reliability == "linkage") {
cluster.reliability <- distance
} else {
R12 <- R[labels %in% cluster1, labels %in% cluster2]
cluster.reliability <- calc.reliability(R, R12, p, reliability)
}
return(list(cluster1 = cluster1, cluster2 = cluster2, cluster.reliability = cluster.reliability, k.p = k / p))
}
hcsvd.obj <- hcsvd2(R, linkage = "average", k = "Kaiser")
hcsvd.obj$merge
D <- matrix(0, 0.1, 3, 3,)
D <- matrix(c(0, 0.1, 3, 3,
0.1, 0, 3, 3,
3, 3, 0, 0.1,
3, 3, 0.1, 0), 4, 4)
D
D <- matrix(c(0, 0.1, 3, 3,
0.1, 0, 3, 3,
3, 3, 0, 0.1,
3, 3, 0.1, 0), 4, 4)
D <- as.dist(D)
D <- matrix(c(0, 0.1, 3, 3,
0.1, 0, 3, 3,
3, 3, 0, 0.1,
3, 3, 0.1, 0), 4, 4)
R <- 1-D
D <- as.dist(D)
hc.agg <- hclust(D, "average")
hcsvd.obj <- hcsvd(R, linkage = "average", k = "Kaiser")
D <- matrix(c(0, 0.1, 1, 1,
0.1, 0, 1, 1,
1, 1, 0, 0.1,
1, 1, 0.1, 0), 4, 4)
R <- 1-D
D <- as.dist(D)
hc.agg <- hclust(D, "average")
hcsvd.obj <- hcsvd2(R, linkage = "average", k = "Kaiser")
hc.agg$merge
hcsvd.obj$merge
D <- matrix(c(0, 0.2, 1, 1,
0.2, 0, 1, 1,
1, 1, 0, 0.1,
1, 1, 0.1, 0), 4, 4)
R <- 1-D
D <- as.dist(D)
hc.agg <- hclust(D, "average")
hcsvd.obj <- hcsvd2(R, linkage = "average", k = "Kaiser")
hc.agg$merge
hcsvd.obj$merge
hc.agg$order
hcsvd.obj$order
plot(hc.agg)
hc.agg$height
hcsvd.obj$height
#' @export
hcsvd2 <- function(R,
k = "Kaiser",
linkage = "average",
reliability,
is.corr = TRUE,
max.iter,
trace = TRUE
) {
if (is.corr && !is.corr.matrix(R)) {
stop("R must be a correlation matrix. Set 'is.corr = FALSE' if you want to supply a data matrix")
}
if (!is.corr) {
X <- R
if (anyNA(X)) {
stop("X contains missing value indicator (NA)")
}
R <- stats::cor(X)
}
if (!((k == "Kaiser") | (is.numeric(k) & (k > 0) & (k <= 1)))) {
stop(paste(k), " is an invalid argument for k")
}
LINKAGE <- c("average", "single", "RV")
if (!(linkage %in% LINKAGE)) {
stop(paste(linkage), " is an invalid linkage function")
}
if (missing(reliability)) {
reliability <- "linkage"
} else {
RELIABILITY <- c("beta", "spectral")
if (!(reliability %in% RELIABILITY))
stop(paste(reliability), " is an invalid argument for internal consistency reliability")
}
if (missing(max.iter)) {
max.iter <- 500
}
p <- ncol(R)
if (length(colnames(R)) == 0 | length(rownames(R)) == 0) {
dimnames(R) <- list(as.character(seq_len(p)), as.character(seq_len(p)))
}
if (length(unique(colnames(R))) != p) {
stop("Variable names are not unique")
}
k.p <- c()
dist.matrix <- matrix(0, p, p)
labels <- colnames(R)
dimnames(dist.matrix) <- list(labels, labels)
merge <- matrix(0, p - 1, 2)
height <- vector(length = p - 1)
order <- labels
sub.matrices <- list(colnames(R))
cluster.count <- p - 2
for (iter in 1:(p - 1)) {
while (length(sub.matrices[[1]]) == 1) {
sub.matrices <- sub.matrices[-1]
}
current.labels <- labels[labels %in% sub.matrices[[1]]]
hcsvd.ht <- hcsvd2.ht(R = R[labels %in% sub.matrices[[1]], labels %in% sub.matrices[[1]]],
k = k,
linkage = linkage,
reliability = reliability,
labels = current.labels,
max.iter = max.iter,
trace = trace)
dist.matrix[labels %in% hcsvd.ht$cluster1, labels %in% hcsvd.ht$cluster2] <- hcsvd.ht$cluster.reliability
dist.matrix[labels %in% hcsvd.ht$cluster2, labels %in% hcsvd.ht$cluster1] <- hcsvd.ht$cluster.reliability
sub.matrices <- sub.matrices[-1] #erase current submatrix
height[p - iter] <- hcsvd.ht$cluster.reliability
if(length(hcsvd.ht$cluster1) != 1){
merge[p - iter, 1] <- cluster.count
cluster.count <- cluster.count - 1
sub.matrices <- c(sub.matrices, list(hcsvd.ht$cluster1))
} else {
merge[p - iter, 1] <- -which(labels == hcsvd.ht$cluster1)
}
if(length(hcsvd.ht$cluster2) != 1){
merge[p - iter, 2] <- cluster.count
cluster.count <- cluster.count - 1
sub.matrices <- c(sub.matrices, list(hcsvd.ht$cluster2))
} else {
merge[p - iter, 2] <- -which(labels == hcsvd.ht$cluster2)
}
order[order %in% c(hcsvd.ht$cluster1, hcsvd.ht$cluster2)] <- c(order[order %in% hcsvd.ht$cluster1],
order[order %in% hcsvd.ht$cluster2])
cat("\rSplit", iter, "from", p - 1, "(", round(iter / (p - 1) * 100, 2), "%)                    ")
k.p <- c(k.p, hcsvd.ht$k.p)
}
u.cor <- 1 - dist.matrix
dist.matrix <- stats::as.dist(dist.matrix)
attr(dist.matrix, "Size") <- p
cat("\r======== FINISHED ========                    ")
cat("\n")
return(list(dist.matrix = dist.matrix, u.cor = u.cor, k.p = k.p,
merge = merge, order = order, height = height, labels = labels))
}
hcsvd2.ht <- function(R,
k,
linkage,
reliability,
labels,
max.iter,
trace = TRUE
) {
p <- ncol(R)
if (p == 2) {
cluster1 <- colnames(R)[1]
cluster2 <- colnames(R)[2]
if (reliability == "linkage") {
idx.cluster <- list(labels[1], labels[2])
cluster.reliability <- calc.distance(R, idx.cluster, labels, p, linkage)
} else {
R12 <- R[1,2]
cluster.reliability <- calc.reliability(R, R12, p, reliability)
}
return(list(cluster1 = cluster1, cluster2 = cluster2, cluster.reliability = cluster.reliability, k.p = NA))
}
lambda <- eigen(R)$values
if (is.numeric(k)) {
if (k == 1){
k <- p - 1
} else {
k <- min(round(k * p), p - 1)
}
}
if (k == "Kaiser") {
k <- min(sum(lambda >= 1) + 2, p - 1)
}
dof.grid <- 1 : (p - 1)
distance <- -Inf
i <- 1
for (dof in dof.grid) {
V <- tryCatch(suppressWarnings(calc.sparse.loadings(X = R, SVD = irlba::irlba(R, k), k = k, n = p - dof, maxit = max.iter)$v), error = function(e) e)
if (inherits(V, "error")) next
for (i in 1:k) {
v <- V[, i]
idx.cluster <- list(labels[v != 0], labels[v == 0])
distance.ht <- calc.distance(R, idx.cluster, labels, p, linkage)
if (distance.ht > distance) {
distance <- distance.ht
cluster1 <- idx.cluster[[1]]
cluster2 <- idx.cluster[[2]]
}
}
}
if (reliability == "linkage") {
cluster.reliability <- distance
} else {
R12 <- R[labels %in% cluster1, labels %in% cluster2]
cluster.reliability <- calc.reliability(R, R12, p, reliability)
}
return(list(cluster1 = cluster1, cluster2 = cluster2, cluster.reliability = cluster.reliability, k.p = k / p))
}
D <- matrix(c(0, 0.2, 1, 1,
0.2, 0, 1, 1,
1, 1, 0, 0.1,
1, 1, 0.1, 0), 4, 4)
R <- 1-D
D <- as.dist(D)
hc.agg <- hclust(D, "average")
hcsvd.obj <- hcsvd2(R, linkage = "average", k = "Kaiser")
hc.agg$merge
hcsvd.obj$merge
hc.agg$order
hcsvd.obj$order
hc.agg$height
hcsvd.obj$height
#' @export
hcsvd2 <- function(R,
k = "Kaiser",
linkage = "average",
reliability,
is.corr = TRUE,
max.iter,
trace = TRUE
) {
if (is.corr && !is.corr.matrix(R)) {
stop("R must be a correlation matrix. Set 'is.corr = FALSE' if you want to supply a data matrix")
}
if (!is.corr) {
X <- R
if (anyNA(X)) {
stop("X contains missing value indicator (NA)")
}
R <- stats::cor(X)
}
if (!((k == "Kaiser") | (is.numeric(k) & (k > 0) & (k <= 1)))) {
stop(paste(k), " is an invalid argument for k")
}
LINKAGE <- c("average", "single", "RV")
if (!(linkage %in% LINKAGE)) {
stop(paste(linkage), " is an invalid linkage function")
}
if (missing(reliability)) {
reliability <- "linkage"
} else {
RELIABILITY <- c("beta", "spectral")
if (!(reliability %in% RELIABILITY))
stop(paste(reliability), " is an invalid argument for internal consistency reliability")
}
if (missing(max.iter)) {
max.iter <- 500
}
p <- ncol(R)
if (length(colnames(R)) == 0 | length(rownames(R)) == 0) {
dimnames(R) <- list(as.character(seq_len(p)), as.character(seq_len(p)))
}
if (length(unique(colnames(R))) != p) {
stop("Variable names are not unique")
}
k.p <- c()
dist.matrix <- matrix(0, p, p)
labels <- colnames(R)
dimnames(dist.matrix) <- list(labels, labels)
merge <- matrix(0, p - 1, 2)
height <- vector(length = p - 1)
order <- labels
sub.matrices <- list(colnames(R))
cluster.count <- p - 2
for (iter in 1:(p - 1)) {
while (length(sub.matrices[[1]]) == 1) {
sub.matrices <- sub.matrices[-1]
}
current.labels <- labels[labels %in% sub.matrices[[1]]]
hcsvd.ht <- hcsvd2.ht(R = R[labels %in% sub.matrices[[1]], labels %in% sub.matrices[[1]]],
k = k,
linkage = linkage,
reliability = reliability,
labels = current.labels,
max.iter = max.iter,
trace = trace)
dist.matrix[labels %in% hcsvd.ht$cluster1, labels %in% hcsvd.ht$cluster2] <- hcsvd.ht$cluster.reliability
dist.matrix[labels %in% hcsvd.ht$cluster2, labels %in% hcsvd.ht$cluster1] <- hcsvd.ht$cluster.reliability
sub.matrices <- sub.matrices[-1] #erase current submatrix
height[p - iter] <- hcsvd.ht$cluster.reliability
if(length(hcsvd.ht$cluster1) != 1){
merge[p - iter, 1] <- cluster.count
cluster.count <- cluster.count - 1
sub.matrices <- c(sub.matrices, list(hcsvd.ht$cluster1))
} else {
merge[p - iter, 1] <- -which(labels == hcsvd.ht$cluster1)
}
if(length(hcsvd.ht$cluster2) != 1){
merge[p - iter, 2] <- cluster.count
cluster.count <- cluster.count - 1
sub.matrices <- c(sub.matrices, list(hcsvd.ht$cluster2))
} else {
merge[p - iter, 2] <- -which(labels == hcsvd.ht$cluster2)
}
order[order %in% c(hcsvd.ht$cluster1, hcsvd.ht$cluster2)] <- c(order[order %in% hcsvd.ht$cluster1],
order[order %in% hcsvd.ht$cluster2])
cat("\rSplit", iter, "from", p - 1, "(", round(iter / (p - 1) * 100, 2), "%)                    ")
k.p <- c(k.p, hcsvd.ht$k.p)
}
order <- match(order, labels)
u.cor <- 1 - dist.matrix
dist.matrix <- stats::as.dist(dist.matrix)
attr(dist.matrix, "Size") <- p
cat("\r======== FINISHED ========                    ")
cat("\n")
return(list(dist.matrix = dist.matrix, u.cor = u.cor, k.p = k.p,
merge = merge, order = order, height = height, labels = labels))
}
hcsvd2.ht <- function(R,
k,
linkage,
reliability,
labels,
max.iter,
trace = TRUE
) {
p <- ncol(R)
if (p == 2) {
cluster1 <- colnames(R)[1]
cluster2 <- colnames(R)[2]
if (reliability == "linkage") {
idx.cluster <- list(labels[1], labels[2])
cluster.reliability <- calc.distance(R, idx.cluster, labels, p, linkage)
} else {
R12 <- R[1,2]
cluster.reliability <- calc.reliability(R, R12, p, reliability)
}
return(list(cluster1 = cluster1, cluster2 = cluster2, cluster.reliability = cluster.reliability, k.p = NA))
}
lambda <- eigen(R)$values
if (is.numeric(k)) {
if (k == 1){
k <- p - 1
} else {
k <- min(round(k * p), p - 1)
}
}
if (k == "Kaiser") {
k <- min(sum(lambda >= 1) + 2, p - 1)
}
dof.grid <- 1 : (p - 1)
distance <- -Inf
i <- 1
for (dof in dof.grid) {
V <- tryCatch(suppressWarnings(calc.sparse.loadings(X = R, SVD = irlba::irlba(R, k), k = k, n = p - dof, maxit = max.iter)$v), error = function(e) e)
if (inherits(V, "error")) next
for (i in 1:k) {
v <- V[, i]
idx.cluster <- list(labels[v != 0], labels[v == 0])
distance.ht <- calc.distance(R, idx.cluster, labels, p, linkage)
if (distance.ht > distance) {
distance <- distance.ht
cluster1 <- idx.cluster[[1]]
cluster2 <- idx.cluster[[2]]
}
}
}
if (reliability == "linkage") {
cluster.reliability <- distance
} else {
R12 <- R[labels %in% cluster1, labels %in% cluster2]
cluster.reliability <- calc.reliability(R, R12, p, reliability)
}
return(list(cluster1 = cluster1, cluster2 = cluster2, cluster.reliability = cluster.reliability, k.p = k / p))
}
D <- matrix(c(0, 0.2, 1, 1,
0.2, 0, 1, 1,
1, 1, 0, 0.1,
1, 1, 0.1, 0), 4, 4)
R <- 1-D
D <- as.dist(D)
hc.agg <- hclust(D, "average")
hcsvd.obj <- hcsvd2(R, linkage = "average", k = "Kaiser")
hc.agg$merge
hcsvd.obj$merge
hc.agg$order
hcsvd.obj$order
hc.agg$height
hcsvd.obj$height
my_hclust <- list(
merge = hcsvd.obj$merge,
height = hcsvd.obj$height,
order = hcsvd.obj$order,
labels = hcsvd.obj$labels
)
class(my_hclust) <- "hclust"
par(mfrow = c(1,2))
plot(hc.agg)
plot(my_hclust)
par(mfrow = c(1,1))
library(aricode) #for ARI
library(bdsvd)
library(cluster) #for diana and k-medoids (partitioning around medoids, PAM)
library(corrp)   #for ACCA. Needs to be installed from GutHub as follows:
#install.packages("remotes")
#remotes::install_github("meantrix/corrP")
library(kernlab) #for spectral clustering
library(mvtnorm) #for rmvnorm
library(PUGMM)   #for ultracorrelation model
p <- 100
n <- 500
b <- 5
design <- "a"
S <- 100 #Number of simulations
Rho <- hcsvd.cor.sim(p = p, b = b, design = design)
X <- scale(rmvnorm(n, mean=rep(0, p), sigma = Rho, checkSymmetry = FALSE))
colnames(X) = seq_len(p)
R <- cor(X)
D <- as.dist(1-R)
hc.agg <- hclust(D, "average")
hcsvd.obj <- hcsvd2(R, linkage = "average", k = "Kaiser")
my_hclust <- list(
merge = hcsvd.obj$merge,
height = hcsvd.obj$height,
order = hcsvd.obj$order,
labels = hcsvd.obj$labels
)
class(my_hclust) <- "hclust"
par(mfrow = c(1,2))
plot(hc.agg)
plot(my_hclust)
par(mfrow = c(1,1))
?hclust
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
min(c(1,2,3), c(3,5,6))
min(c(8,4,8), c(3,5,6))
devtools::document()
devtools::document()
devtools::document()
