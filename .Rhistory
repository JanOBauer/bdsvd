Sigma <- diag(runif(p, 1, 5), p, p)
return(Sigma)
}
if(design == "c"){
rho0 <- 0.2
epsilon <- 0.1
d <- p/b
Sigma <- matrix(0, p, p)
for(i in 1:b){
rho <- runif(1, rho0-epsilon, rho0+epsilon)
Sigma[(1 + d*(i-1)):(d + d*(i-1)), (1 + d*(i-1)):(d + d*(i-1))] <-
( (1-rho) * diag(1,d, d) + 2* rho * rep(1,d)%*%t(rep(1,d))   )
}
return(Sigma)
}
if(design == "d"){
rho0 <- 0.45
epsilon <- 0.15
omega <- 0.1
d <- p/b
Sigma <- matrix(0, p, p)
for(B in 1:b){
rho <- runif(1, rho0-epsilon, rho0+epsilon)
Rii <- matrix(0, d, d)
for (i in 1:d) {
for (j in 1:d) {
Rii[i, j] <- (-1)^(i + j) * rho^(abs(i - j)^(omega))
}
}
diag(Rii) <- 1
Sigma[(1 + d*(B-1)):(d + d*(B-1)), (1 + d*(B-1)):(d + d*(B-1))] <- Rii
}
return(Sigma)
}
}
get.confusionMatrix <- function(blocks, labels, b){
TP <- 0
FN <- 0
FP <- 0
TN <- 0
block.labels <- list()
for(i in 1:length(blocks)){
block.labels[[i]] <- as.integer(blocks[[i]])
}
SigmaEst <- matrix(FALSE, p, p)
for(i in 1:length(blocks)){
SigmaEst[block.labels[[i]], block.labels[[i]] ] <- TRUE
}
for(i in 1:b){
if(all(SigmaEst[which(labels == i), which(labels == i)])){
TN <- TN + 1 #Not splitting within Sigma_i
} else{
FP <- FP + 1 #Splitting within Sigma_i
}
}
for(i in 1:b){
if(any(SigmaEst[which(labels != i), which(labels == i)])){
FN <- FN + 1 #Not splitting Sigma_i and Sigma_j
} else{
TP <- TP + 1 #Spliting Sigma_i and Sigma_j
}
}
sens <- TP / (TP + FN)
spec <- TN / (FP + TN)
FPR <- FP / (FP + TN)
FDR <- FP / (TP + FP)
if(TP+FP == 0){FDR <- 0}
return(list(TP=TP, TN=TN, FP=FP,FN=FN,sensitivity=sens,specificity=spec,FDR=FDR, FPR=FPR))
}
#Simulate data matrix X
Sigma <- cov.sim(p = p, b = b, design = design)
X <- rmvnorm(n, mean=rep(0,p), sigma=Sigma)
library(cvCovEst) #for the ad hoc procedure
library(mvtnorm) #for rmvnorm
library(bdsvd) #for BD-SVD
library(shock) #for SHDJ and SHRR
#Simulate data matrix X
Sigma <- cov.sim(p = p, b = b, design = design)
X <- rmvnorm(n, mean=rep(0,p), sigma=Sigma)
colnames(X) = 1:ncol(X)
SVBD <- iterative.bdsvd(X, standardize = FALSE, trace = TRUE)
p <- 500
n <- 5000
b <- 50
S <- 100 #Number of simulations
#Simulate data matrix X
Sigma <- cov.sim(p = p, b = b, design = design)
X <- rmvnorm(n, mean=rep(0,p), sigma=Sigma)
colnames(X) = 1:ncol(X)
SVBD <- iterative.bdsvd(X, standardize = FALSE, trace = TRUE)
?runif
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document
devtools::document()
usethis::use_testthat()
use_test()
usethis::use_test()
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
usethis::test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
R CMD check --as-cran
check --as-cran
--as-cran
devtools::document()
?PMA::PMD
?shock::shockSelect
?PMA::PMD
devtools::document()
devtools::document()
devtools::document
devtools::document()
devtools::document()
devtools::document()
?as.dist
pkgload::dev_help('hcsvd')
?as.dist
?cov
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools:document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
0.99999^4
0.9^4
0.95^4
0.95^2
0.9^2
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
v <- vector(length = 0)
v
length(v)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
253*0.75
24/190
?foreeach
library(foreach)
?foreach
library(doParallel)
?makeCluster
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?registerDoParallel
library(doParallel)
?registerDoParallel
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
0.75^2 * 0.8
0.75^2 * 0.8 * 2
?bdsvd
library(bdsvd)
?bdsvd
devtools::document()
devtools::document()
?hcsvd
devtools::document()
?hcsvd
devtools::document()
?hcsvd
devtools::document()
?hcsvd
devtools::document()
devtools::document()
?hcsvd
devtools::document()
?hcsvd
?hcsvd.cor.sim
devtools::document()
?hcsvd
devtools::document()
?hcsvd
0.73^2 * 0.8 * 2
devtools::document()
?hcsvd
devtools::document()
?hcsvd
?hcsvd
devtools::document()
?hcsvd
devtools::document()
?detect.blocks
devtools::document()
?detect.blocks
devtools::document()
devtools::document()
devtools::document()
?detect.blocks
devtools::document()
?bdsvd
?iterative.bdsvd
devtools::document()
?iterative.bdsvd
?bdsvd
library(bdsvd)
?result.bdsvd
devtools::document()
devtools::document()
?result.bdsvd
devtools::document()
?result.bdsvd
devtools::document()
?iterative.bdsvd
devtools::document()
?iterative.bdsvd
devtools::document()
devtools::document()
devtools::document()
?detect.blocks
devtools::document()
R CMD check --as-cran
library(bdsvd)
p <- 500 #Number of variables
n <- 125 #Number of observations
b <- 500 #Number of blocks
design <- "a"
#Simulate data matrix X
set.seed(1)
Sigma <- bdsvd.cov.sim(p = p, b = b, design = design)
X <- rmvnorm(n, mean=rep(0,p), sigma=Sigma)
require(mvtnorm)
p <- 500 #Number of variables
n <- 125 #Number of observations
b <- 500 #Number of blocks
design <- "a"
#Simulate data matrix X
set.seed(1)
Sigma <- bdsvd.cov.sim(p = p, b = b, design = design)
X <- rmvnorm(n, mean=rep(0,p), sigma=Sigma)
colnames(X) <- 1:p
#Perform the ad hoc procedure
require(cvCovEst)
detect.blocks(scadEst(dat = X, lambda = 0.2), threshold = 0)
rm
require(mvtnorm)
p <- 500 #Number of variables
n <- 125 #Number of observations
b <- 500 #Number of blocks
design <- "a"
#Simulate data matrix X
set.seed(1)
Sigma <- bdsvd.cov.sim(p = p, b = b, design = design)
X <- rmvnorm(n, mean=rep(0,p), sigma=Sigma)
colnames(X) <- 1:p
#Perform the ad hoc procedure
require(cvCovEst)
detect.blocks(scadEst(dat = X, lambda = 0.2), threshold = 0)
?bdsvd
require(mvtnorm)
p <- 500 #Number of variables
n <- 250 #Number of observations
b <- 10  #Number of blocks
design <- "c" #Simulation design "a", "b", "c", or "d".
#Simulate data matrix X
set.seed(1)
Sigma <- bdsvd.cov.sim(p = p, b = b, design = design)
X <- rmvnorm(n, mean=rep(0,p), sigma=Sigma)
colnames(X) <- 1:p
bdsvd(X, standardize = FALSE)
example(bdsvd)
?example
?InsectSprays
example("InsectSprays")
example("bdsvd")
devtools::document()
exportPattern(".")
library(devtools)
exportPattern(".")
devtools::test()
devtools::test()
?hcsvd
library(bdsvd)
?hcsvd
p <- 100
n <- 1000
b <- 5
design <- "a"
Rho <- hcsvd.cor.sim(p = 100, b = 5, design = "a")
X <- scale(rmvnorm(300, mean=rep(0,100), sigma=Rho, checkSymmetry = FALSE))
require(mvtnorm)
p <- 100
n <- 1000
b <- 5
design <- "a"
Rho <- hcsvd.cor.sim(p = 100, b = 5, design = "a")
X <- scale(rmvnorm(300, mean=rep(0,100), sigma=Rho, checkSymmetry = FALSE))
colnames(X) = 1:ncol(X)
hcsvd.obj <- hcsvd(X, k = "Kaiser")
p <- 100
n <- 1000
b <- 5
design <- "a"
Rho <- hcsvd.cor.sim(p = 100, b = 5, design = "a")
X <- scale(rmvnorm(300, mean=rep(0,100), sigma=Rho, checkSymmetry = FALSE))
colnames(X) = 1:ncol(X)
hcsvd.obj <- hcsvd(X, k = "Kaiser")
hcsvd.obj
hc <- hclust(hcsvd.obj$dist.matrix)
cutree(hc, k = 5)
identical(cutree(hc, k = 5) ,rep(1:5, each = (20)))
rep(1:5, each = (20)
)
cutree(hc, k = 5)
ARI(cutree(hc, k = 5) ,rep(1:5, each = (20)))
library(aricode) #for ARI
ARI(cutree(hc, k = 5) ,rep(1:5, each = (20)))
identical(as.vector(cutree(hc, k = 5)) ,rep(1:5, each = (20)))
test_check("bdsvd")
library(testthat)
test_check("bdsvd")
test_dir()
?test_dir
library(testthat)
test_check("bdsvd")
library(testthat)
library(bdsvd)
test_check("bdsvd")
rlang::last_trace()
rlang::last_trace(drop=FALSE)
?hcsvd
devtools::document()
?hcsvd
3045.34 + 766,33
3045.34 + 766.33
3045.34 + 766.33*12
(3045.34 + 766.33)*12
4123 * 12
?detect.blocks
V <- matrix(c(1,0,
1,0,
0,1,
0,1), 4, 2, byrow = TRUE)
rownames(V) <- c("A", "B", "C", "D")
detected.blocks <- detect.blocks(V)
#Variables in block one with corresponding column index:
detected.blocks[[1]]@features
detected.blocks[[1]]@block.columns
detected.blocks[[2]]@block.columns
detected.blocks[[2]]@features
?single.bdsvd
set.seed(1)
Sigma <- bdsvd.cov.sim(p = 200, b = 2, design = "c")
X <- rmvnorm(500, mean=rep(0, 200), sigma=Sigma)
require(mvtnorm)
set.seed(1)
Sigma <- bdsvd.cov.sim(p = 200, b = 2, design = "c")
X <- rmvnorm(500, mean=rep(0, 200), sigma=Sigma)
colnames(X) <- 1:p
set.seed(1)
Sigma <- bdsvd.cov.sim(p = 200, b = 2, design = "c")
X <- rmvnorm(500, mean=rep(0, 200), sigma=Sigma)
colnames(X) <- 1:200
ht <- bdsvd.ht(X)
ht
ht$dof
single.bdsvd(X, dof = ht$dof, standardize = FALSE)
single.bdsvd(X, dof = ht$dof, standardize = FALSE)[[1]]
?bdsvd
set.seed(1)
Sigma <- bdsvd.cov.sim(p = 200, b = 2, design = "c")
X <- rmvnorm(n, mean=rep(0, 200), sigma=Sigma)
set.seed(1)
Sigma <- bdsvd.cov.sim(p = 200, b = 2, design = "c")
X <- rmvnorm(500, mean=rep(0, 200), sigma=Sigma)
colnames(X) <- 1:200
bdsvd(X, standardize = FALSE)
bdsvd.obj <- bdsvd(X, standardize = FALSE)
length(bdsvd.obj)
Sigma <- bdsvd.cov.sim(p = 200, b = 2, design = "d")
X <- rmvnorm(500, mean=rep(0, 200), sigma=Sigma)
colnames(X) <- 1:200
bdsvd.obj <- bdsvd(X, standardize = FALSE)
bdsvd.obj
set.seed(1)
Sigma <- bdsvd.cov.sim(p = 200, b = 4, design = "c")
X <- rmvnorm(500, mean=rep(0, 200), sigma=Sigma)
colnames(X) <- 1:200
bdsvd.obj <- bdsvd(X, standardize = FALSE)
bdsvd.obj
V <- matrix(c(1,0,
1,0,
0,2,
0,2), 4, 2, byrow = TRUE)
rownames(V) <- c("A", "B", "C", "D")
detected.blocks <- detect.blocks(V)
detected.blocks
detect.blocks(V, 1.5)
V <- matrix(c(1,0,
2,0,
0,3,
0,3), 4, 2, byrow = TRUE)
rownames(V) <- c("A", "B", "C", "D")
detected.blocks <- detect.blocks(V)
detect.blocks(V, 1.5) )
detect.blocks(V, 1.5)
detect.blocks(V, 2.5)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
