resShock <- shockSelect(X)
SHDJ.TIME[s] <- (proc.time() - start)[3]/60
## SHDJ
shdjAEstim <- diag(p)
for(i in 1:length(unique(resShock$SHDJlabels))){
stepdata <- as.matrix(X[,resShock$SHDJlabels==i],nrow=dim(X)[1])
if(dim(stepdata)[2]>1){
resNet <- networkInferenceGlassoBIC(stepdata)
shdjAEstim[resShock$SHDJlabels==i,resShock$SHDJlabels==i] <- resNet$A
}
}
shdjAEstim.blocks <- list()
for(i in 1:length(blocks(shdjAEstim, 0))){
shdjAEstim.blocks[[i]] <- as.character(blocks(shdjAEstim, 0)[[i]]@features)
}
ConfusionMatrix <- get.confusionMatrix(blocks = shdjAEstim.blocks, labels = labels, b = b)
SHDJ.SENS[s] <- ConfusionMatrix$sensitivity
SHDJ.SPEC[s] <- ConfusionMatrix$specificity
SHDJ.FDR[s]  <- ConfusionMatrix$FDR
#SHRR
shrrAEstim <- diag(p)
for(i in 1:length(unique(resShock$SHRRlabels))){
stepdata <- as.matrix(X[,resShock$SHRRlabels==i],nrow=dim(X)[1])
if(dim(stepdata)[2]>1){
resNet <- networkInferenceGlassoBIC(stepdata)
shrrAEstim[resShock$SHRRlabels==i,resShock$SHRRlabels==i] <- resNet$A
}
}
shrrAEstim.blocks <- list()
for(i in 1:length(blocks(shrrAEstim, 0))){
shrrAEstim.blocks[[i]] <- as.character(blocks(shrrAEstim, 0)[[i]]@features)
}
ConfusionMatrix <- get.confusionMatrix(blocks = shrrAEstim.blocks, labels = labels, b = b)
SHRR.SENS[s] <- ConfusionMatrix$sensitivity
SHRR.SPEC[s] <- ConfusionMatrix$specificity
SHRR.FDR[s]  <- ConfusionMatrix$FDR
}
print(paste0("======================="))
print(paste0("== RESULT FOR s in 1:", s))
print(paste0("======================="))
print(paste0("AVERAGE SENSITIVITY:"))
print(paste0("BD-SVD:",  round(mean(SVBD.SENS[1:s]), 2)  ))
print(paste0("Est.1: ",  round(mean(Est.1.SENS[1:s]), 2) ))
print(paste0("Est.2: ",  round(mean(Est.2.SENS[1:s]), 2) ))
print(paste0("SHDJ:  ",  round(mean(SHDJ.SENS[1:s]), 2)  ))
print(paste0("SHRR:  ",  round(mean(SHRR.SENS[1:s]), 2)  ))
print(paste0("======================="))
print(paste0("AVERAGE SPECIFICITY:"))
print(paste0("BD-SVD:",  round(mean(SVBD.SPEC[1:s]), 2)  ))
print(paste0("Est.1: ",  round(mean(Est.1.SPEC[1:s]), 2) ))
print(paste0("Est.2: ",  round(mean(Est.2.SPEC[1:s]), 2) ))
print(paste0("SHDJ:  ",  round(mean(SHDJ.SPEC[1:s]), 2)  ))
print(paste0("SHRR:  ",  round(mean(SHRR.SPEC[1:s]), 2)  ))
print(paste0("======================="))
print(paste0("AVERAGE FDR:"))
print(paste0("BD-SVD:",  round(mean(SVBD.FDR[1:s]), 2)  ))
print(paste0("Est.1: ",  round(mean(Est.1.FDR[1:s]), 2) ))
print(paste0("Est.2: ",  round(mean(Est.2.FDR[1:s]), 2) ))
print(paste0("SHDJ:  ",  round(mean(SHDJ.FDR[1:s]), 2)  ))
print(paste0("SHRR:  ",  round(mean(SHRR.FDR[1:s]), 2)  ))
print(paste0("======================="))
print(paste0("AVERAGE TIME (min.):"))
print(paste0("BD-SVD:",  round(mean(SVBD.TIME[1:s]), 2)  ))
print(paste0("Est.1: ",  round(mean(Est.1.TIME[1:s]), 2) ))
print(paste0("Est.2: ",  round(mean(Est.2.TIME[1:s]), 2) ))
print(paste0("SHDJ:  ",  round(mean(SHDJ.TIME[1:s]), 2)  ))
print(paste0("SHRR:  ",  round(mean(SHDJ.TIME[1:s]), 2)  ))
print(paste0("======================="))
}
library(cvCovEst) #for the ad hoc procedure
library(mvtnorm) #for rmvnorm
library(bdsvd) #for BD-SVD
library(shock) #for SHDJ and SHRR
cov.sim <- function(p = p, b = b, design = design){
if(design == "a"){
Sigma <- diag(1, p, p)
return(Sigma)
}
if(design == "b"){
Sigma <- diag(runif(p, 1, 5), p, p)
return(Sigma)
}
if(design == "c"){
rho0 <- 0.2
epsilon <- 0.1
d <- p/b
Sigma <- matrix(0, p, p)
for(i in 1:b){
rho <- runif(1, rho0-epsilon, rho0+epsilon)
Sigma[(1 + d*(i-1)):(d + d*(i-1)), (1 + d*(i-1)):(d + d*(i-1))] <-
( (1-rho) * diag(1,d, d) + 2* rho * rep(1,d)%*%t(rep(1,d))   )
}
return(Sigma)
}
if(design == "d"){
rho0 <- 0.45
epsilon <- 0.15
omega <- 0.1
d <- p/b
Sigma <- matrix(0, p, p)
for(B in 1:b){
rho <- runif(1, rho0-epsilon, rho0+epsilon)
Rii <- matrix(0, d, d)
for (i in 1:d) {
for (j in 1:d) {
Rii[i, j] <- (-1)^(i + j) * rho^(abs(i - j)^(omega))
}
}
diag(Rii) <- 1
Sigma[(1 + d*(B-1)):(d + d*(B-1)), (1 + d*(B-1)):(d + d*(B-1))] <- Rii
}
return(Sigma)
}
}
get.confusionMatrix <- function(blocks, labels, b){
TP <- 0
FN <- 0
FP <- 0
TN <- 0
block.labels <- list()
for(i in 1:length(blocks)){
block.labels[[i]] <- as.integer(blocks[[i]])
}
SigmaEst <- matrix(FALSE, p, p)
for(i in 1:length(blocks)){
SigmaEst[block.labels[[i]], block.labels[[i]] ] <- TRUE
}
for(i in 1:b){
if(all(SigmaEst[which(labels == i), which(labels == i)])){
TN <- TN + 1 #Not splitting within Sigma_i
} else{
FP <- FP + 1 #Splitting within Sigma_i
}
}
for(i in 1:b){
if(any(SigmaEst[which(labels != i), which(labels == i)])){
FN <- FN + 1 #Not splitting Sigma_i and Sigma_j
} else{
TP <- TP + 1 #Spliting Sigma_i and Sigma_j
}
}
sens <- TP / (TP + FN)
spec <- TN / (FP + TN)
FPR <- FP / (FP + TN)
FDR <- FP / (TP + FP)
if(TP+FP == 0){FDR <- 0}
return(list(TP=TP, TN=TN, FP=FP,FN=FN,sensitivity=sens,specificity=spec,FDR=FDR, FPR=FPR))
}
p <- 500
n <- 65
b <- 500
S <- 100 #Number of simulations
design = "b" #Choose simulation design "a", "b", "c", or "d"
labels <- factor(rep(1:b, length.out=p))
labels <- labels[order(labels)]
SVBD.SENS <- vector(length=S)
SVBD.SPEC <- vector(length=S)
SVBD.FDR  <- vector(length=S)
SVBD.TIME <- vector(length=S)
SHDJ.SENS <- vector(length=S)
SHDJ.SPEC <- vector(length=S)
SHDJ.FDR  <- vector(length=S)
SHDJ.TIME <- vector(length=S)
SHRR.SENS <- vector(length=S)
SHRR.SPEC <- vector(length=S)
SHRR.FDR  <- vector(length=S)
Est.1.SENS <- vector(length=S)
Est.1.SPEC <- vector(length=S)
Est.1.FDR  <- vector(length=S)
Est.1.TIME <- vector(length=S)
Est.2.SENS <- vector(length=S)
Est.2.SPEC <- vector(length=S)
Est.2.FDR  <- vector(length=S)
Est.2.TIME <- vector(length=S)
for (s in 1:S){
set.seed(123+s)
#Simulate data matrix X
Sigma <- cov.sim(p = p, b = b, design = design)
X <- rmvnorm(n, mean=rep(0,p), sigma=Sigma)
colnames(X) = 1:ncol(X)
if(TRUE){
cat("Compute BD-SVD\r")
start <- proc.time()
SVBD <- iterative.bdsvd(X, standardize = FALSE, trace = TRUE)
SVBD.TIME[s] <- (proc.time() - start)[3]/60
ConfusionMatrix <- get.confusionMatrix(blocks = SVBD, labels = labels, b = b)
SVBD.SENS[s] <- ConfusionMatrix$sensitivity
SVBD.SPEC[s] <- ConfusionMatrix$specificity
SVBD.FDR[s]  <- ConfusionMatrix$FDR
}
cat("Compute Est.1 and Est.2\r")
#Est.1
start <- proc.time()
blocks.1 <- blocks(scadEst(X, 0.2), 0.1)
Est.1.TIME[s] <- (proc.time() - start)[3]/60
Estblocks <- list()
for(i in 1:length(blocks.1)){
Estblocks[[i]] <- as.character(blocks.1[[i]]@features)
}
ConfusionMatrix <- get.confusionMatrix(blocks = Estblocks, labels = labels, b = b)
Est.1.SENS[s] <- ConfusionMatrix$sensitivity
Est.1.SPEC[s] <- ConfusionMatrix$specificity
Est.1.FDR[s]  <- ConfusionMatrix$FDR
#Est.2
start <- proc.time()
blocks.2 <- blocks(scadEst(X, 0.2), 0.2)
Est.2.TIME[s] <- (proc.time() - start)[3]/60
Estblocks <- list()
for(i in 1:length(blocks.2)){
Estblocks[[i]] <- as.character(blocks.2[[i]]@features)
}
ConfusionMatrix <- get.confusionMatrix(blocks = Estblocks, labels = labels, b = b)
Est.2.SENS[s] <- ConfusionMatrix$sensitivity
Est.2.SPEC[s] <- ConfusionMatrix$specificity
Est.2.FDR[s]  <- ConfusionMatrix$FDR
if(FALSE){
cat("Compute SHDJ and SHRR\r")
start <- proc.time()
resShock <- shockSelect(X)
SHDJ.TIME[s] <- (proc.time() - start)[3]/60
## SHDJ
shdjAEstim <- diag(p)
for(i in 1:length(unique(resShock$SHDJlabels))){
stepdata <- as.matrix(X[,resShock$SHDJlabels==i],nrow=dim(X)[1])
if(dim(stepdata)[2]>1){
resNet <- networkInferenceGlassoBIC(stepdata)
shdjAEstim[resShock$SHDJlabels==i,resShock$SHDJlabels==i] <- resNet$A
}
}
shdjAEstim.blocks <- list()
for(i in 1:length(blocks(shdjAEstim, 0))){
shdjAEstim.blocks[[i]] <- as.character(blocks(shdjAEstim, 0)[[i]]@features)
}
ConfusionMatrix <- get.confusionMatrix(blocks = shdjAEstim.blocks, labels = labels, b = b)
SHDJ.SENS[s] <- ConfusionMatrix$sensitivity
SHDJ.SPEC[s] <- ConfusionMatrix$specificity
SHDJ.FDR[s]  <- ConfusionMatrix$FDR
#SHRR
shrrAEstim <- diag(p)
for(i in 1:length(unique(resShock$SHRRlabels))){
stepdata <- as.matrix(X[,resShock$SHRRlabels==i],nrow=dim(X)[1])
if(dim(stepdata)[2]>1){
resNet <- networkInferenceGlassoBIC(stepdata)
shrrAEstim[resShock$SHRRlabels==i,resShock$SHRRlabels==i] <- resNet$A
}
}
shrrAEstim.blocks <- list()
for(i in 1:length(blocks(shrrAEstim, 0))){
shrrAEstim.blocks[[i]] <- as.character(blocks(shrrAEstim, 0)[[i]]@features)
}
ConfusionMatrix <- get.confusionMatrix(blocks = shrrAEstim.blocks, labels = labels, b = b)
SHRR.SENS[s] <- ConfusionMatrix$sensitivity
SHRR.SPEC[s] <- ConfusionMatrix$specificity
SHRR.FDR[s]  <- ConfusionMatrix$FDR
}
print(paste0("======================="))
print(paste0("== RESULT FOR s in 1:", s))
print(paste0("======================="))
print(paste0("AVERAGE SENSITIVITY:"))
print(paste0("BD-SVD:",  round(mean(SVBD.SENS[1:s]), 2)  ))
print(paste0("Est.1: ",  round(mean(Est.1.SENS[1:s]), 2) ))
print(paste0("Est.2: ",  round(mean(Est.2.SENS[1:s]), 2) ))
print(paste0("SHDJ:  ",  round(mean(SHDJ.SENS[1:s]), 2)  ))
print(paste0("SHRR:  ",  round(mean(SHRR.SENS[1:s]), 2)  ))
print(paste0("======================="))
print(paste0("AVERAGE SPECIFICITY:"))
print(paste0("BD-SVD:",  round(mean(SVBD.SPEC[1:s]), 2)  ))
print(paste0("Est.1: ",  round(mean(Est.1.SPEC[1:s]), 2) ))
print(paste0("Est.2: ",  round(mean(Est.2.SPEC[1:s]), 2) ))
print(paste0("SHDJ:  ",  round(mean(SHDJ.SPEC[1:s]), 2)  ))
print(paste0("SHRR:  ",  round(mean(SHRR.SPEC[1:s]), 2)  ))
print(paste0("======================="))
print(paste0("AVERAGE FDR:"))
print(paste0("BD-SVD:",  round(mean(SVBD.FDR[1:s]), 2)  ))
print(paste0("Est.1: ",  round(mean(Est.1.FDR[1:s]), 2) ))
print(paste0("Est.2: ",  round(mean(Est.2.FDR[1:s]), 2) ))
print(paste0("SHDJ:  ",  round(mean(SHDJ.FDR[1:s]), 2)  ))
print(paste0("SHRR:  ",  round(mean(SHRR.FDR[1:s]), 2)  ))
print(paste0("======================="))
print(paste0("AVERAGE TIME (min.):"))
print(paste0("BD-SVD:",  round(mean(SVBD.TIME[1:s]), 2)  ))
print(paste0("Est.1: ",  round(mean(Est.1.TIME[1:s]), 2) ))
print(paste0("Est.2: ",  round(mean(Est.2.TIME[1:s]), 2) ))
print(paste0("SHDJ:  ",  round(mean(SHDJ.TIME[1:s]), 2)  ))
print(paste0("SHRR:  ",  round(mean(SHDJ.TIME[1:s]), 2)  ))
print(paste0("======================="))
}
SVBD.SENS
detect.blocks(scadEst(X, 0.2), 0.1)
cov.sim <- function(p = p, b = b, design = design){
if(design == "a"){
Sigma <- diag(1, p, p)
return(Sigma)
}
if(design == "b"){
Sigma <- diag(runif(p, 1, 5), p, p)
return(Sigma)
}
if(design == "c"){
rho0 <- 0.2
epsilon <- 0.1
d <- p/b
Sigma <- matrix(0, p, p)
for(i in 1:b){
rho <- runif(1, rho0-epsilon, rho0+epsilon)
Sigma[(1 + d*(i-1)):(d + d*(i-1)), (1 + d*(i-1)):(d + d*(i-1))] <-
( (1-rho) * diag(1,d, d) + 2* rho * rep(1,d)%*%t(rep(1,d))   )
}
return(Sigma)
}
if(design == "d"){
rho0 <- 0.45
epsilon <- 0.15
omega <- 0.1
d <- p/b
Sigma <- matrix(0, p, p)
for(B in 1:b){
rho <- runif(1, rho0-epsilon, rho0+epsilon)
Rii <- matrix(0, d, d)
for (i in 1:d) {
for (j in 1:d) {
Rii[i, j] <- (-1)^(i + j) * rho^(abs(i - j)^(omega))
}
}
diag(Rii) <- 1
Sigma[(1 + d*(B-1)):(d + d*(B-1)), (1 + d*(B-1)):(d + d*(B-1))] <- Rii
}
return(Sigma)
}
}
get.confusionMatrix <- function(blocks, labels, b){
TP <- 0
FN <- 0
FP <- 0
TN <- 0
block.labels <- list()
for(i in 1:length(blocks)){
block.labels[[i]] <- as.integer(blocks[[i]])
}
SigmaEst <- matrix(FALSE, p, p)
for(i in 1:length(blocks)){
SigmaEst[block.labels[[i]], block.labels[[i]] ] <- TRUE
}
for(i in 1:b){
if(all(SigmaEst[which(labels == i), which(labels == i)])){
TN <- TN + 1 #Not splitting within Sigma_i
} else{
FP <- FP + 1 #Splitting within Sigma_i
}
}
for(i in 1:b){
if(any(SigmaEst[which(labels != i), which(labels == i)])){
FN <- FN + 1 #Not splitting Sigma_i and Sigma_j
} else{
TP <- TP + 1 #Spliting Sigma_i and Sigma_j
}
}
sens <- TP / (TP + FN)
spec <- TN / (FP + TN)
FPR <- FP / (FP + TN)
FDR <- FP / (TP + FP)
if(TP+FP == 0){FDR <- 0}
return(list(TP=TP, TN=TN, FP=FP,FN=FN,sensitivity=sens,specificity=spec,FDR=FDR, FPR=FPR))
}
p <- 500
n <- 5000
b <- 500
S <- 100 #Number of simulations
design = "c" #Choose simulation design "a", "b", "c", or "d"
labels <- factor(rep(1:b, length.out=p))
labels <- labels[order(labels)]
cov.sim <- function(p = p, b = b, design = design){
if(design == "a"){
Sigma <- diag(1, p, p)
return(Sigma)
}
if(design == "b"){
Sigma <- diag(runif(p, 1, 5), p, p)
return(Sigma)
}
if(design == "c"){
rho0 <- 0.2
epsilon <- 0.1
d <- p/b
Sigma <- matrix(0, p, p)
for(i in 1:b){
rho <- runif(1, rho0-epsilon, rho0+epsilon)
Sigma[(1 + d*(i-1)):(d + d*(i-1)), (1 + d*(i-1)):(d + d*(i-1))] <-
( (1-rho) * diag(1,d, d) + 2* rho * rep(1,d)%*%t(rep(1,d))   )
}
return(Sigma)
}
if(design == "d"){
rho0 <- 0.45
epsilon <- 0.15
omega <- 0.1
d <- p/b
Sigma <- matrix(0, p, p)
for(B in 1:b){
rho <- runif(1, rho0-epsilon, rho0+epsilon)
Rii <- matrix(0, d, d)
for (i in 1:d) {
for (j in 1:d) {
Rii[i, j] <- (-1)^(i + j) * rho^(abs(i - j)^(omega))
}
}
diag(Rii) <- 1
Sigma[(1 + d*(B-1)):(d + d*(B-1)), (1 + d*(B-1)):(d + d*(B-1))] <- Rii
}
return(Sigma)
}
}
get.confusionMatrix <- function(blocks, labels, b){
TP <- 0
FN <- 0
FP <- 0
TN <- 0
block.labels <- list()
for(i in 1:length(blocks)){
block.labels[[i]] <- as.integer(blocks[[i]])
}
SigmaEst <- matrix(FALSE, p, p)
for(i in 1:length(blocks)){
SigmaEst[block.labels[[i]], block.labels[[i]] ] <- TRUE
}
for(i in 1:b){
if(all(SigmaEst[which(labels == i), which(labels == i)])){
TN <- TN + 1 #Not splitting within Sigma_i
} else{
FP <- FP + 1 #Splitting within Sigma_i
}
}
for(i in 1:b){
if(any(SigmaEst[which(labels != i), which(labels == i)])){
FN <- FN + 1 #Not splitting Sigma_i and Sigma_j
} else{
TP <- TP + 1 #Spliting Sigma_i and Sigma_j
}
}
sens <- TP / (TP + FN)
spec <- TN / (FP + TN)
FPR <- FP / (FP + TN)
FDR <- FP / (TP + FP)
if(TP+FP == 0){FDR <- 0}
return(list(TP=TP, TN=TN, FP=FP,FN=FN,sensitivity=sens,specificity=spec,FDR=FDR, FPR=FPR))
}
#Simulate data matrix X
Sigma <- cov.sim(p = p, b = b, design = design)
X <- rmvnorm(n, mean=rep(0,p), sigma=Sigma)
library(cvCovEst) #for the ad hoc procedure
library(mvtnorm) #for rmvnorm
library(bdsvd) #for BD-SVD
library(shock) #for SHDJ and SHRR
#Simulate data matrix X
Sigma <- cov.sim(p = p, b = b, design = design)
X <- rmvnorm(n, mean=rep(0,p), sigma=Sigma)
colnames(X) = 1:ncol(X)
SVBD <- iterative.bdsvd(X, standardize = FALSE, trace = TRUE)
p <- 500
n <- 5000
b <- 50
S <- 100 #Number of simulations
#Simulate data matrix X
Sigma <- cov.sim(p = p, b = b, design = design)
X <- rmvnorm(n, mean=rep(0,p), sigma=Sigma)
colnames(X) = 1:ncol(X)
SVBD <- iterative.bdsvd(X, standardize = FALSE, trace = TRUE)
?runif
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document
devtools::document()
usethis::use_testthat()
use_test()
usethis::use_test()
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
usethis::test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
R CMD check --as-cran
check --as-cran
--as-cran
devtools::document()
?PMA::PMD
?shock::shockSelect
?PMA::PMD
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
stop("invalid design", paste("", "a"))
?paste
stop("invalid design \" ")
stop("invalid design \" paste(design) \" ")
stop("invalid design \", paste(design), \" ")
paste("\"", test, "\"", sep = "")
test <- hallo
test <- "hallo"
paste("\"", test, "\"", sep = "")
k <- "all"
paste("\"", test, "\"", sep = "")
stop(paste("", k), "is an invalid argument for k")
stop(paste("", k), " is an invalid argument for k")
stop(paste(k), " is an invalid argument for k")
